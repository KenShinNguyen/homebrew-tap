diff --git a/meson.build b/meson.build
index b628b13c..d6ef5db4 100644
--- a/meson.build
+++ b/meson.build
@@ -4,7 +4,7 @@ project('libplacebo', ['c', 'cpp'],
     'buildtype=debugoptimized',
     'warning_level=2',
     'c_std=c11',
-    'cpp_std=c++20',
+    'cpp_std=c++17',
   ],
   meson_version: '>=0.63',
   version: '@0@.@1@.@2@'.format(
diff --git a/src/common.h b/src/common.h
index 46c9099a..5a381f95 100644
--- a/src/common.h
+++ b/src/common.h
@@ -19,10 +19,6 @@
 
 #define __STDC_FORMAT_MACROS
 
-#ifdef __cplusplus
-#include <version>
-#endif
-
 #if !defined(__cplusplus) || defined(__cpp_lib_stdatomic_h)
 #define PL_HAVE_STDATOMIC
 #endif
diff --git a/src/convert.cc b/src/convert.cc
index 05c9dd01..aec17320 100644
--- a/src/convert.cc
+++ b/src/convert.cc
@@ -15,105 +15,34 @@
  * License along with libplacebo.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-#include <charconv>
-#include <limits>
-#include <system_error>
-
 #if __has_include(<fast_float/fast_float.h>)
 # include <fast_float/fast_float.h>
 #endif
 
 #include "pl_string.h"
 
-[[maybe_unused]]
-static int ccStrPrintDouble( char *str, int bufsize, int decimals, double value );
-
-namespace {
-
-template <typename T>
-struct has_std_to_chars_impl {
-    template <typename CT>
-    static auto _(CT s) -> decltype(std::to_chars(s, s, std::declval<T>()), std::true_type{});
-    static auto _(...) -> std::false_type;
-    static constexpr bool value = decltype(_((char *){}))::value;
-};
-
-template <typename T>
-constexpr bool has_std_to_chars = has_std_to_chars_impl<T>::value;
-
-template <typename T, typename... Args>
-static inline int to_chars(char *buf, size_t len, T n, Args ...args)
+extern "C" int print_hex(char *buf, unsigned int x)
 {
-    if constexpr (has_std_to_chars<T>) {
-        auto [ptr, ec] = std::to_chars(buf, buf + len, n, args...);
-        return ec == std::errc() ? ptr - buf : 0;
-    } else {
-        static_assert(std::is_same_v<float, T> || std::is_same_v<double, T>,
-                      "Not implemented!");
-        // FIXME: Fallback for GCC <= 10 currently required for MinGW-w64 on
-        // Ubuntu 22.04. Remove this when Ubuntu 24.04 is released, as it will
-        // provide newer MinGW-w64 GCC and it will be safe to require it.
-        return ccStrPrintDouble(buf, len, std::numeric_limits<T>::max_digits10, n);
-    }
-}
-
-template <typename T>
-struct has_std_from_chars_impl {
-    template <typename CT>
-    static auto _(CT s) -> decltype(std::from_chars(s, s, std::declval<T&>()), std::true_type{});
-    static auto _(...) -> std::false_type;
-    static constexpr bool value = decltype(_((const char *){}))::value;
-};
+    static const char hexdigits[] = "0123456789abcdef";
+    const int nibbles0 = __builtin_clz(x | 1) >> 2;
+    buf -= nibbles0;
 
-template <typename T>
-constexpr bool has_std_from_chars = has_std_from_chars_impl<T>::value;
-
-template <typename T, typename... Args>
-static inline bool from_chars(pl_str str, T &n, Args ...args)
-{
-    if constexpr (has_std_from_chars<T>) {
-        auto [ptr, ec] = std::from_chars((const char *) str.buf,
-                                         (const char *) str.buf + str.len,
-                                         n, args...);
-        return ec == std::errc();
-    } else {
-        constexpr bool is_fp = std::is_same_v<float, T> || std::is_same_v<double, T>;
-        static_assert(is_fp, "Not implemented!");
-#if !__has_include(<fast_float/fast_float.h>)
-        static_assert(!is_fp, "<fast_float/fast_float.h> is required, but not " \
-                              "found. Please run `git submodule update --init`" \
-                              " or provide <fast_float/fast_float.h>");
-#else
-        // FIXME: Fallback for libc++, as it does not implement floating-point
-        // variant of std::from_chars. Remove this when appropriate.
-        auto [ptr, ec] = fast_float::from_chars((const char *) str.buf,
-                                                (const char *) str.buf + str.len,
-                                                n, args...);
-        return ec == std::errc();
-#endif
+    switch (nibbles0) {
+    pl_static_assert(sizeof(unsigned int) == sizeof(uint32_t));
+    case 0: buf[0] = hexdigits[(x >> 28) & 0xF]; // fall through
+    case 1: buf[1] = hexdigits[(x >> 24) & 0xF]; // fall through
+    case 2: buf[2] = hexdigits[(x >> 20) & 0xF]; // fall through
+    case 3: buf[3] = hexdigits[(x >> 16) & 0xF]; // fall through
+    case 4: buf[4] = hexdigits[(x >> 12) & 0xF]; // fall through
+    case 5: buf[5] = hexdigits[(x >>  8) & 0xF]; // fall through
+    case 6: buf[6] = hexdigits[(x >>  4) & 0xF]; // fall through
+    case 7: buf[7] = hexdigits[(x >>  0) & 0xF];
+            return 8 - nibbles0;
     }
-}
 
+    pl_unreachable();
 }
 
-#define CHAR_CONVERT(name, type, ...)                           \
-    int pl_str_print_##name(char *buf, size_t len, type n)      \
-    {                                                           \
-        return to_chars(buf, len, n __VA_OPT__(,) __VA_ARGS__); \
-    }                                                           \
-    bool pl_str_parse_##name(pl_str str, type *n)               \
-    {                                                           \
-        return from_chars(str, *n __VA_OPT__(,) __VA_ARGS__);   \
-    }
-
-CHAR_CONVERT(hex, unsigned short, 16)
-CHAR_CONVERT(int, int)
-CHAR_CONVERT(uint, unsigned int)
-CHAR_CONVERT(int64, int64_t)
-CHAR_CONVERT(uint64, uint64_t)
-CHAR_CONVERT(float, float)
-CHAR_CONVERT(double, double)
-
 /* *****************************************************************************
  *
  * Copyright (c) 2007-2016 Alexis Naveros.
@@ -139,7 +68,298 @@ CHAR_CONVERT(double, double)
  * -----------------------------------------------------------------------------
  */
 
-static int ccStrPrintDouble( char *str, int bufsize, int decimals, double value )
+static const char ccStrPrintDecimalTable[201] =
+{
+  "00010203040506070809"
+  "10111213141516171819"
+  "20212223242526272829"
+  "30313233343536373839"
+  "40414243444546474849"
+  "50515253545556575859"
+  "60616263646566676869"
+  "70717273747576777879"
+  "80818283848586878889"
+  "90919293949596979899"
+};
+
+static inline int ccStrPrintLength32( uint32_t n )
+{
+    int size;
+    if( n >= 10000 )
+    {
+        if( n >= 10000000 )
+        {
+            if( n >= 1000000000 )
+                size = 10;
+            else if( n >= 100000000 )
+                size = 9;
+            else
+                size = 8;
+        }
+        else if( n >= 1000000 )
+            size = 7;
+        else if( n >= 100000 )
+            size = 6;
+        else
+            size = 5;
+    }
+    else
+    {
+        if( n >= 100 )
+        {
+            if( n >= 1000 )
+                size = 4;
+            else
+                size = 3;
+        }
+        else if( n >= 10 )
+            size = 2;
+        else
+            size = 1;
+    }
+    return size;
+}
+
+static inline int ccStrPrintLength64( uint64_t n )
+{
+    int size;
+    if( n >= 10000 )
+    {
+        if( n >= 10000000 )
+        {
+            if( n >= 10000000000LL )
+            {
+                if( n >= 10000000000000LL )
+                {
+                    if( n >= 10000000000000000LL )
+                    {
+                        if( n >= 10000000000000000000ULL )
+                            size = 20;
+                        else if( n >= 1000000000000000000LL )
+                            size = 19;
+                        else if( n >= 100000000000000000LL )
+                            size = 18;
+                        else
+                            size = 17;
+                    }
+                    else if( n >= 1000000000000000LL )
+                        size = 16;
+                    else if( n >= 100000000000000LL )
+                        size = 15;
+                    else
+                        size = 14;
+                }
+                else if( n >= 1000000000000LL )
+                    size = 13;
+                else if( n >= 100000000000LL )
+                    size = 12;
+                else
+                    size = 11;
+            }
+            else if( n >= 1000000000 )
+                size = 10;
+            else if( n >= 100000000 )
+                size = 9;
+            else
+                size = 8;
+        }
+        else
+        {
+            if( n >= 1000000 )
+                size = 7;
+            else if( n >= 100000 )
+                size = 6;
+            else
+                size = 5;
+        }
+    }
+    else if( n >= 100 )
+    {
+        if( n >= 1000 )
+            size = 4;
+        else
+            size = 3;
+    }
+    else if( n >= 10 )
+        size = 2;
+    else
+        size = 1;
+    return size;
+}
+
+extern "C" int ccStrPrintInt32( char *str, int32_t n )
+{
+    int sign, size, retsize, pos;
+    uint32_t val32;
+    const char *src;
+
+    if( n == 0 )
+    {
+        str[0] = '0';
+        str[1] = 0;
+        return 1;
+    }
+
+    sign = -( n < 0 );
+    val32 = ( n ^ sign ) - sign;
+    size = ccStrPrintLength32( val32 );
+
+    if( sign )
+    {
+        size++;
+        str[0] = '-';
+    }
+    retsize = size;
+    str[size] = 0;
+    str += size - 1;
+
+    while( val32 >= 100 )
+    {
+        pos = val32 % 100;
+        val32 /= 100;
+        src = &ccStrPrintDecimalTable[ pos << 1 ];
+        str[-1] = src[0];
+        str[0] = src[1];
+        str -= 2;
+    }
+    while( val32 > 0 )
+    {
+        *str-- = '0' + ( val32 % 10 );
+        val32 /= 10;
+    }
+
+    return retsize;
+}
+
+extern "C" int ccStrPrintUint32( char *str, uint32_t n )
+{
+    int size, retsize, pos;
+    uint32_t val32;
+    const char *src;
+
+    if( n == 0 )
+    {
+        str[0] = '0';
+        str[1] = 0;
+        return 1;
+    }
+
+    val32 = n;
+    size = ccStrPrintLength32( val32 );
+    retsize = size;
+    str[size] = 0;
+    str += size - 1;
+
+    while( val32 >= 100 )
+    {
+        pos = val32 % 100;
+        val32 /= 100;
+        src = &ccStrPrintDecimalTable[ pos << 1 ];
+        str[-1] = src[0];
+        str[0] = src[1];
+        str -= 2;
+    }
+    while( val32 > 0 )
+    {
+        *str-- = '0' + ( val32 % 10 );
+        val32 /= 10;
+    }
+
+    return retsize;
+}
+
+extern "C" int ccStrPrintInt64( char *str, int64_t n )
+{
+    int sign, size, retsize, pos;
+    uint64_t val64;
+    const char *src;
+
+    if( n == 0 )
+    {
+        str[0] = '0';
+        str[1] = 0;
+        return 1;
+    }
+
+    sign = -( n < 0 );
+    val64 = ( n ^ sign ) - sign;
+    size = ccStrPrintLength64( val64 );
+
+    if( sign )
+    {
+        size++;
+        str[0] = '-';
+    }
+    retsize = size;
+    str[size] = 0;
+    str += size - 1;
+
+    while( val64 >= 100 )
+    {
+        pos = val64 % 100;
+        val64 /= 100;
+        src = &ccStrPrintDecimalTable[ pos << 1 ];
+        str[-1] = src[0];
+        str[0] = src[1];
+        str -= 2;
+    }
+    while( val64 > 0 )
+    {
+        *str-- = '0' + ( val64 % 10 );
+        val64 /= 10;
+    }
+
+    return retsize;
+}
+
+extern "C" int ccStrPrintUint64( char *str, uint64_t n )
+{
+    int size, retsize, pos;
+    uint64_t val64;
+    const char *src;
+
+    if( n == 0 )
+    {
+        str[0] = '0';
+        str[1] = 0;
+        return 1;
+    }
+
+    val64 = n;
+    size = ccStrPrintLength64( val64 );
+
+    retsize = size;
+    str[size] = 0;
+    str += size - 1;
+
+    while( val64 >= 100 )
+    {
+        pos = val64 % 100;
+        val64 /= 100;
+        src = &ccStrPrintDecimalTable[ pos << 1 ];
+        str[-1] = src[0];
+        str[0] = src[1];
+        str -= 2;
+    }
+    while( val64 > 0 )
+    {
+        *str-- = '0' + ( val64 % 10 );
+        val64 /= 10;
+    }
+
+    return retsize;
+}
+
+#define CC_STR_PRINT_BUFSIZE_INT32 (12)
+#define CC_STR_PRINT_BUFSIZE_UINT32 (11)
+#define CC_STR_PRINT_BUFSIZE_INT64 (21)
+#define CC_STR_PRINT_BUFSIZE_UINT64 (20)
+#define CC_STR_PRINT_DOUBLE_MAX_DECIMAL (24)
+
+static const double ccStrPrintBiasTable[CC_STR_PRINT_DOUBLE_MAX_DECIMAL+1] =
+{ 0.5, 0.05, 0.005, 0.0005, 0.00005, 0.000005, 0.0000005, 0.00000005, 0.000000005, 0.0000000005, 0.00000000005, 0.000000000005, 0.0000000000005, 0.00000000000005, 0.000000000000005, 0.0000000000000005, 0.00000000000000005, 0.000000000000000005, 0.0000000000000000005, 0.00000000000000000005, 0.000000000000000000005, 0.0000000000000000000005, 0.00000000000000000000005, 0.000000000000000000000005, 0.0000000000000000000000005 };
+
+extern "C" int ccStrPrintDouble( char *str, int bufsize, int decimals, double value )
 {
     int size, offset, index;
     int32_t frac, accumsub;
@@ -156,22 +376,27 @@ static int ccStrPrintDouble( char *str, int bufsize, int decimals, double value
         value = -value;
     }
 
+    /* Add bias matching the count of desired decimals in order to round the right way */
+    if( decimals > CC_STR_PRINT_DOUBLE_MAX_DECIMAL )
+        decimals = CC_STR_PRINT_DOUBLE_MAX_DECIMAL;
+    value += ccStrPrintBiasTable[decimals];
+
     if( value < 4294967296.0 )
     {
-        u32 = (uint32_t)value;
-        offset = pl_str_print_uint( str, bufsize, u32 );
-        if (!offset)
+        if( bufsize < CC_STR_PRINT_BUFSIZE_UINT32 )
             goto error;
+        u32 = (int32_t)value;
+        offset = ccStrPrintUint32( str, u32 );
         size += offset;
         bufsize -= size;
         value -= (double)u32;
     }
     else if( value < 18446744073709551616.0 )
     {
-        u64 = (uint64_t)value;
-        offset = pl_str_print_uint64( str, bufsize, u64 );
-        if (!offset)
+        if( bufsize < CC_STR_PRINT_BUFSIZE_UINT64 )
             goto error;
+        u64 = (int64_t)value;
+        offset = ccStrPrintUint64( str, u64 );
         size += offset;
         bufsize -= size;
         value -= (double)u64;
@@ -184,19 +409,13 @@ static int ccStrPrintDouble( char *str, int bufsize, int decimals, double value
     if( decimals <= 0 )
         return size;
 
+    str[offset] = '.';
     muldec = 10.0;
     accumsub = 0;
-    str += offset;
+    str += offset + 1;
 
     for( index = 0 ; index < decimals ; index++ )
     {
-        // Skip printing insignificant decimal digits
-        if (value * muldec - accumsub <= std::numeric_limits<double>::epsilon())
-            break;
-        if (index == 0) {
-            size += 1;
-            *str++ = '.';
-        }
         frac = (int32_t)( value * muldec ) - accumsub;
         frac = PL_CLAMP(frac, 0, 9); // FIXME: why is this needed?
         str[index] = '0' + (char)frac;
@@ -212,11 +431,8 @@ static int ccStrPrintDouble( char *str, int bufsize, int decimals, double value
             accumsub = 0;
         }
     }
-    // Round up the last decimal digit
-    if ( str[ index - 1 ] < '9' && (int32_t)( value * muldec ) - accumsub >= 5 )
-        str[ index - 1 ]++;
     str[ index ] = 0;
-    size += index;
+    size += index + 1;
     return size;
 
 error:
@@ -231,3 +447,164 @@ error:
     }
     return 0;
 }
+
+#define CC_CHAR_IS_DELIMITER(c) ((c)<=' ')
+
+extern "C" int ccSeqParseInt64( char *seq, int seqlength, int64_t *retint )
+{
+  int i, negflag;
+  char c;
+  int64_t workint;
+
+  *retint = 0;
+  if( !( seqlength ) )
+    return 0;
+  negflag = 0;
+  i = 0;
+  if( *seq == '-' )
+  {
+    negflag = 1;
+    i = 1;
+  } else if( *seq == '+' )
+    i = 1;
+
+  workint = 0;
+  for( ; i < seqlength ; i++ )
+  {
+    c = seq[i];
+    if( ( c >= '0' ) && ( c <= '9' ) )
+    {
+      if( workint >= (int64_t)0xcccccccccccccccLL )
+        return 0;
+      workint = ( workint * 10 ) + ( c - '0' );
+    }
+    else if( CC_CHAR_IS_DELIMITER( c ) )
+      break;
+    else
+      return 0;
+  }
+
+  if( negflag )
+    workint = -workint;
+  *retint = workint;
+  return 1;
+}
+
+extern "C" int ccSeqParseUint64( char *seq, int seqlength, uint64_t *retint )
+{
+  int i;
+  char c;
+  uint64_t workint;
+
+  *retint = 0;
+  if( !( seqlength ) )
+    return 0;
+  i = 0;
+  if( *seq == '+' )
+    i = 1;
+
+  workint = 0;
+  for( ; i < seqlength ; i++ )
+  {
+    c = seq[i];
+    if( ( c >= '0' ) && ( c <= '9' ) )
+    {
+      if( workint >= (uint64_t)0x1999999999999999LL )
+        return 0;
+      workint = ( workint * 10 ) + ( c - '0' );
+    }
+    else if( CC_CHAR_IS_DELIMITER( c ) )
+      break;
+    else
+      return 0;
+  }
+
+  *retint = workint;
+  return 1;
+}
+
+// Function copied from musl libc exp10(), to avoid portability issues
+// Copyright (c) 2005-2020 Rich Felker, et al.
+// Available under the terms of the MIT license
+static inline double ccExp10(double x)
+{
+    static const double p10[] = {
+        1e-15, 1e-14, 1e-13, 1e-12, 1e-11, 1e-10,
+        1e-9, 1e-8, 1e-7, 1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1,
+        1, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9,
+        1e10, 1e11, 1e12, 1e13, 1e14, 1e15
+    };
+
+    double n, y = modf(x, &n);
+    union {double f; uint64_t i;} u = {n};
+    /* fabs(n) < 16 without raising invalid on nan */
+    if ((u.i>>52 & 0x7ff) < 0x3ff+4) {
+        if (!y) return p10[(int)n+15];
+        y = exp2(3.32192809488736234787031942948939 * y);
+        return y * p10[(int)n+15];
+    }
+    return pow(10.0, x);
+}
+
+extern "C" int ccSeqParseDouble( char *seq, int seqlength, double *retdouble )
+{
+  int i, negflag;
+  char c;
+  double accum;
+  double decfactor;
+  int64_t exponent;
+
+  *retdouble = 0.0;
+  i = 0;
+  if( !( seqlength ) )
+    return 0;
+  negflag = ( seq[i] == '-' );
+  i += negflag;
+
+  accum = 0.0;
+  for( ; i < seqlength ; i++ )
+  {
+    c = seq[i];
+    if( ( c >= '0' ) && ( c <= '9' ) )
+      accum = ( accum * 10.0 ) + (double)( c - '0' );
+    else if( CC_CHAR_IS_DELIMITER( c ) )
+      goto done;
+    else if( c == 'e' || c == 'E' )
+      goto sci;
+    else if( c == '.' )
+      break;
+    else
+      return 0;
+  }
+
+  i++;
+  decfactor = 0.1;
+  for( ; i < seqlength ; i++ )
+  {
+    c = seq[i];
+    if( ( c >= '0' ) && ( c <= '9' ) )
+    {
+      accum += (double)( c - '0' ) * decfactor;
+      decfactor *= 0.1;
+    }
+    else if( CC_CHAR_IS_DELIMITER( c ) )
+      goto done;
+    else if( c == 'e' || c == 'E' )
+      goto sci;
+    else
+      return 0;
+  }
+
+done:
+  if( negflag )
+    accum = -accum;
+  *retdouble = (double)accum;
+  return 1;
+
+sci:
+  i++;
+  if( !ccSeqParseInt64( seq + i, seqlength - i, &exponent ) )
+    return 0;
+  accum *= ccExp10 ( exponent );
+  goto done;
+}
diff --git a/src/format.c b/src/format.c
index 458d4931..ac996907 100644
--- a/src/format.c
+++ b/src/format.c
@@ -61,24 +61,24 @@ void pl_str_append_vasprintf_c(void *alloc, pl_str *str, const char *fmt,
             len = 1;
             break;
         case 'd':
-            len = pl_str_print_int(buf, sizeof(buf), va_arg(ap, int));
+            len = ccStrPrintInt32(buf, va_arg(ap, int));
             break;
         case 'h': ; // only used for %hx
             assert(c[1] == 'x');
-            len = pl_str_print_hex(buf, sizeof(buf), (unsigned short) va_arg(ap, unsigned int));
+            len = print_hex(buf, (unsigned short) va_arg(ap, unsigned int));
             c++;
             break;
         case 'u':
-            len = pl_str_print_uint(buf, sizeof(buf), va_arg(ap, unsigned int));
+            len = ccStrPrintUint32(buf, va_arg(ap, unsigned int));
             break;
         case 'l':
             assert(c[1] == 'l');
             switch (c[2]) {
             case 'u':
-                len = pl_str_print_uint64(buf, sizeof(buf), va_arg(ap, unsigned long long));
+                len = ccStrPrintUint64(buf, va_arg(ap, unsigned long long));
                 break;
             case 'd':
-                len = pl_str_print_int64(buf, sizeof(buf), va_arg(ap, long long));
+                len = ccStrPrintInt64(buf, va_arg(ap, long long));
                 break;
             default: pl_unreachable();
             }
@@ -86,11 +86,11 @@ void pl_str_append_vasprintf_c(void *alloc, pl_str *str, const char *fmt,
             break;
         case 'z':
             assert(c[1] == 'u');
-            len = pl_str_print_uint64(buf, sizeof(buf), va_arg(ap, size_t));
+            len = ccStrPrintUint64(buf, va_arg(ap, size_t));
             c++;
             break;
         case 'f':
-            len = pl_str_print_double(buf, sizeof(buf), va_arg(ap, double));
+            len = ccStrPrintDouble(buf, sizeof(buf), 20, va_arg(ap, double));
             break;
         default:
             fprintf(stderr, "Invalid conversion character: '%c'!\n", c[0]);
@@ -148,19 +148,19 @@ size_t pl_str_append_memprintf_c(void *alloc, pl_str *str, const char *fmt,
         case 'd': ;
             int d;
             LOAD(d);
-            len = pl_str_print_int(buf, sizeof(buf), d);
+            len = ccStrPrintInt32(buf, d);
             break;
         case 'h': ;
             assert(c[1] == 'x');
             unsigned short hx;
             LOAD(hx);
-            len = pl_str_print_hex(buf, sizeof(buf), hx);
+            len = print_hex(buf, hx);
             c++;
             break;
         case 'u': ;
             unsigned u;
             LOAD(u);
-            len = pl_str_print_uint(buf, sizeof(buf), u);
+            len = ccStrPrintUint32(buf, u);
             break;
         case 'l':
             assert(c[1] == 'l');
@@ -168,12 +168,12 @@ size_t pl_str_append_memprintf_c(void *alloc, pl_str *str, const char *fmt,
             case 'u': ;
                 long long unsigned llu;
                 LOAD(llu);
-                len = pl_str_print_uint64(buf, sizeof(buf), llu);
+                len = ccStrPrintUint64(buf, llu);
                 break;
             case 'd': ;
                 long long int lld;
                 LOAD(lld);
-                len = pl_str_print_int64(buf, sizeof(buf), lld);
+                len = ccStrPrintInt64(buf, lld);
                 break;
             default: pl_unreachable();
             }
@@ -183,13 +183,13 @@ size_t pl_str_append_memprintf_c(void *alloc, pl_str *str, const char *fmt,
             assert(c[1] == 'u');
             size_t zu;
             LOAD(zu);
-            len = pl_str_print_uint64(buf, sizeof(buf), zu);
+            len = ccStrPrintUint64(buf, zu);
             c++;
             break;
         case 'f': ;
             double f;
             LOAD(f);
-            len = pl_str_print_double(buf, sizeof(buf), f);
+            len = ccStrPrintDouble(buf, sizeof(buf), 20, f);
             break;
         default:
             fprintf(stderr, "Invalid conversion character: '%c'!\n", c[0]);
@@ -203,3 +203,18 @@ size_t pl_str_append_memprintf_c(void *alloc, pl_str *str, const char *fmt,
     pl_str_append(alloc, str, pl_str0(fmt));
     return (uintptr_t) ptr - (uintptr_t) args;
 }
+
+bool pl_str_parse_double(pl_str str, double *out)
+{
+    return ccSeqParseDouble((char *) str.buf, str.len, out);
+}
+
+bool pl_str_parse_int64(pl_str str, int64_t *out)
+{
+    return ccSeqParseInt64((char *) str.buf, str.len, out);
+}
+
+bool pl_str_parse_uint64(pl_str str, uint64_t *out)
+{
+    return ccSeqParseUint64((char *) str.buf, str.len, out);
+}
diff --git a/src/pl_string.h b/src/pl_string.h
index 7a0005cd..47066bda 100644
--- a/src/pl_string.h
+++ b/src/pl_string.h
@@ -96,23 +96,57 @@ size_t pl_str_append_memprintf_c(void *alloc, pl_str *str, const char *fmt,
     PL_PRINTF(3, 0);
 
 // Locale-invariant number printing
-int pl_str_print_hex(char *buf, size_t len, unsigned short n);
-int pl_str_print_int(char *buf, size_t len, int n);
-int pl_str_print_uint(char *buf, size_t len, unsigned int n);
-int pl_str_print_int64(char *buf, size_t len, int64_t n);
-int pl_str_print_uint64(char *buf, size_t len, uint64_t n);
-int pl_str_print_float(char *buf, size_t len, float n);
-int pl_str_print_double(char *buf, size_t len, double n);
+// int pl_str_print_hex(char *buf, size_t len, unsigned short n);
+// int pl_str_print_int(char *buf, size_t len, int n);
+// int pl_str_print_uint(char *buf, size_t len, unsigned int n);
+// int pl_str_print_int64(char *buf, size_t len, int64_t n);
+// int pl_str_print_uint64(char *buf, size_t len, uint64_t n);
+// int pl_str_print_float(char *buf, size_t len, float n);
+// int pl_str_print_double(char *buf, size_t len, double n);
 
 // Locale-invariant number parsing
-bool pl_str_parse_hex(pl_str str, unsigned short *out);
-bool pl_str_parse_int(pl_str str, int *out);
-bool pl_str_parse_uint(pl_str str, unsigned int *out);
+// bool pl_str_parse_hex(pl_str str, unsigned short *out);
+// bool pl_str_parse_int(pl_str str, int *out);
+// bool pl_str_parse_uint(pl_str str, unsigned int *out);
 bool pl_str_parse_int64(pl_str str, int64_t *out);
 bool pl_str_parse_uint64(pl_str str, uint64_t *out);
-bool pl_str_parse_float(pl_str str, float *out);
+// bool pl_str_parse_float(pl_str str, float *out);
 bool pl_str_parse_double(pl_str str, double *out);
 
+static inline bool pl_str_parse_float(pl_str str, float *out)
+{
+    double dbl;
+    bool ret = pl_str_parse_double(str, &dbl);
+    *out = (float) dbl;
+    return ret;
+}
+
+static inline bool pl_str_parse_int(pl_str str, int *out)
+{
+    int64_t i64;
+    bool ret = pl_str_parse_int64(str, &i64);
+    *out = (int) i64;
+    return ret;
+}
+
+static inline bool pl_str_parse_uint(pl_str str, unsigned int *out)
+{
+    uint64_t u64;
+    bool ret = pl_str_parse_uint64(str, &u64);
+    *out = (unsigned int) u64;
+    return ret;
+}
+
+int print_hex(char *buf, unsigned int x);
+int ccStrPrintInt32( char *str, int32_t n );
+int ccStrPrintUint32( char *str, uint32_t n );
+int ccStrPrintInt64( char *str, int64_t n );
+int ccStrPrintUint64( char *str, uint64_t n );
+int ccStrPrintDouble( char *str, int bufsize, int decimals, double value );
+int ccSeqParseInt64( char *seq, int seqlength, int64_t *retint );
+int ccSeqParseUint64( char *seq, int seqlength, uint64_t *retint );
+int ccSeqParseDouble( char *seq, int seqlength, double *retdouble );
+
 // Variants of string.h functions
 int pl_strchr(pl_str str, int c);
 size_t pl_strspn(pl_str str, const char *accept);
diff --git a/src/tests/string.c b/src/tests/string.c
index 52985c44..93e300da 100644
--- a/src/tests/string.c
+++ b/src/tests/string.c
@@ -93,14 +93,6 @@ int main()
     int64_t i64;
     uint64_t u64;
 
-    REQUIRE(pl_str_parse_double(pl_str0("4294967295.56"), &d));      REQUIRE_FEQ(d, 4294967295.56, 1e-20);
-    REQUIRE(pl_str_parse_double(pl_str0("-4294967295.56"), &d));     REQUIRE_FEQ(d, -4294967295.56, 1e-20);
-    REQUIRE(pl_str_parse_double(pl_str0("83224965647295.65"), &d));  REQUIRE_FEQ(d, 83224965647295.65, 1e-20);
-    REQUIRE(pl_str_parse_double(pl_str0("-83224965647295.65"), &d)); REQUIRE_FEQ(d, -83224965647295.65, 1e-20);
-    REQUIRE(pl_str_parse_float(pl_str0("4294967295.56"), &f));       REQUIRE_FEQ(f, 4294967295.56f, 1e-8);
-    REQUIRE(pl_str_parse_float(pl_str0("-4294967295.56"), &f));      REQUIRE_FEQ(f, -4294967295.56f, 1e-8);
-    REQUIRE(pl_str_parse_float(pl_str0("83224965647295.65"), &f));   REQUIRE_FEQ(f, 83224965647295.65f, 1e-8);
-    REQUIRE(pl_str_parse_float(pl_str0("-83224965647295.65"), &f));  REQUIRE_FEQ(f, -83224965647295.65f, 1e-8);
     REQUIRE(pl_str_parse_float(pl_str0("1.3984"), &f));     REQUIRE_FEQ(f, 1.3984f, 1e-8);
     REQUIRE(pl_str_parse_float(pl_str0("-8.9100083"), &f)); REQUIRE_FEQ(f, -8.9100083f, 1e-8);
     REQUIRE(pl_str_parse_float(pl_str0("-0"), &f));         REQUIRE_FEQ(f, 0.0f, 1e-8);
